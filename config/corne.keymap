/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        clearbt {
            bindings = <&bt BT_CLR>;
            key-positions = <34 10>;
            layers = <3>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 30 39 18 40 41 19 7 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W            &kp F                &kp P                &kp B        &kp J    &kp L                &kp U            &kp Y            &kp APOS  &none
&none  &kp A  &hml LEFT_ALT R  &hml LEFT_CONTROL S  &hml LEFT_COMMAND T  &kp G        &kp M    &hmr LEFT_COMMAND N  &hmr LEFT_ALT E  &hmr LEFT_ALT I  &kp O     &none
&none  &kp Z  &kp X            &kp C                &kp D                &kp V        &kp K    &kp H                &kp COMMA        &kp DOT          &kp SEMI  &none
                               &sl 1                &kp BACKSPACE        &kp SPACE    &kp RET  &sk LEFT_SHIFT       &sl 2
            >;

            label = "Letters";
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N7     &kp N5    &kp N3     &kp N1         &kp N9       &kp N8   &kp N0          &kp N2     &kp N4    &kp N6     &none
&none  &sk LSHFT  &sk LALT  &sk RCTRL  &sk LGUI       &sk F11      &sk F12  &sk LGUI        &sk RCTRL  &sk LALT  &sk LSHFT  &none
&none  &kp F7     &kp F5    &kp F3     &kp F1         &kp F9       &kp F8   &kp F10         &kp F2     &kp F4    &kp F6     &none
                            &none      &kp BACKSPACE  &kp SPACE    &kp RET  &sk LEFT_SHIFT  &mo 3
            >;

            label = "Numbers";
        };

        sym_layer {
            bindings = <
&none  &kp ESC   &kp LBKT       &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp TILDE           &kp UNDER        &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RBKT           &kp GRAVE    &none
&none  &kp PIPE  &kp AMPERSAND  &kp EQUAL       &kp PLUS              &kp MINUS           &kp EXCLAMATION  &kp QUESTION           &kp PERCENT      &kp DOUBLE_QUOTES  &kp HASH     &none
&none  &kp TAB   &kp BACKSLASH  &kp COLON       &kp LESS_THAN         &kp GREATER_THAN    &kp SLASH        &kp ASTERISK           &kp DOLLAR       &kp CARET          &kp AT_SIGN  &none
                                &mo 3           &kp BACKSPACE         &kp SPACE           &kp RET          &sk LEFT_SHIFT         &none
            >;

            label = "Symbols";
        };

        con_layer {
            bindings = <
&none  &none        &none     &none      &none                     &kp C_VOLUME_UP    &kp C_FAST_FORWARD  &none           &none     &none   &bt BT_NXT    &none
&none  &kp LG(TAB)  &sk LALT  &sk RCTRL  &sk LGUI                  &kp C_MUTE         &kp C_PLAY_PAUSE    &kp LEFT        &kp DOWN  &kp UP  &kp RIGHT     &none
&none  &none        &none     &none      &kp LS(LC(LG(NUMBER_4)))  &kp C_VOL_DN       &kp C_PREV          &kp TAB         &none     &none   &bt BT_SEL 0  &none
                              &mo 1      &kp BACKSPACE             &kp SPACE          &kp ENTER           &sk LEFT_SHIFT  &mo 2
            >;

            label = "Controls";
        };
    };
};
